{"version":3,"sources":["dom.js"],"names":["window","dom","find","selector","scope","document","querySelectorAll","parent","node","parentNode","children","siblings","Array","filter","n","style","name","value","arguments","length","object","key","each","nodeList","fn","i","call"],"mappings":"AAAAA,MAAM,CAACC,GAAP,GAAa;AAGT;AACAC,EAAAA,IAJS,gBAIJC,QAJI,EAIMC,KAJN,EAIa;AAClB,WAAO,CAACA,KAAK,IAAIC,QAAV,EAAoBC,gBAApB,CAAqCH,QAArC,CAAP;AACH,GANQ;AAOT;AACAI,EAAAA,MARS,kBAQFC,IARE,EAQI;AACT,WAAOA,IAAI,CAACC,UAAZ;AACH,GAVQ;AAWT;AACAC,EAAAA,QAZS,oBAYAF,IAZA,EAYM;AACX,WAAOA,IAAI,CAACE,QAAZ;AACH,GAdQ;AAeT;AACAC,EAAAA,QAhBS,oBAgBAH,IAhBA,EAgBM;AACX,WAAOI,KAAK,CAACJ,IAAI,CAACC,UAAL,CAAgBC,QAAhB,CAAyBA,QAA1B,CAAL,CAAyCG,MAAzC,CAAgD,UAAAC,CAAC;AAAA,aAAIA,CAAC,KAAKN,IAAV;AAAA,KAAjD,CAAP;AACH,GAlBQ;AAuBT;AACAO,EAAAA,KAxBS,iBAwBHP,IAxBG,EAwBGQ,IAxBH,EAwBSC,KAxBT,EAwBgB;AACrB,QAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AACxB;AACAX,MAAAA,IAAI,CAACO,KAAL,CAAWC,IAAX,IAAmBC,KAAnB;AACH,KAHD,MAGO,IAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC/B,UAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AAC1B;AACA,eAAOR,IAAI,CAACO,KAAL,CAAWC,IAAX,CAAP;AACH,OAHD,MAGO,IAAIA,IAAI,YAAYI,MAApB,EAA4B;AAC/B;AACA,YAAMA,OAAM,GAAGJ,IAAf;;AACA,aAAK,IAAIK,GAAT,IAAgBD,OAAhB,EAAwB;AACpBZ,UAAAA,IAAI,CAACO,KAAL,CAAWM,GAAX,IAAkBD,OAAM,CAACC,GAAD,CAAxB;AACH;AACJ;AACJ;AACJ,GAxCQ;AA6CT;AACAC,EAAAA,IA9CS,gBA8CJC,QA9CI,EA8CMC,EA9CN,EA8CU;AACf,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACJ,MAA7B,EAAqCM,CAAC,EAAtC,EAA0C;AACtCD,MAAAA,EAAE,CAACE,IAAH,CAAQ,IAAR,EAAcH,QAAQ,CAACE,CAAD,CAAtB;AACH;AACJ;AAlDQ,CAAb","file":"dom.1d0b6d56.js","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n\r\n\r\n    //dom.find('选择器',node)[0] 用于获取标签或标签们\r\n    find(selector, scope) {\r\n        return (scope || document).querySelectorAll(selector)\r\n    },\r\n    //dom.parent(node) 用于获取父元素\r\n    parent(node) {\r\n        return node.parentNode\r\n    },\r\n    //dom.children(node) 用于获取子元素\r\n    children(node) {\r\n        return node.children\r\n    },\r\n    //dom.siblings(dom.find('选择器')[0]) 用于获取兄弟姐妹元素\r\n    siblings(node) {\r\n        return Array(node.parentNode.children.children).filter(n => n !== node)\r\n    },\r\n\r\n\r\n\r\n\r\n    //用于修改style\r\n    style(node, name, value) {\r\n        if (arguments.length === 3) {\r\n            //dom.style(div, 'color', 'red')\r\n            node.style[name] = value\r\n        } else if (arguments.length === 2) {\r\n            if (typeof name === 'string') {\r\n                //dom.style(div, 'color')\r\n                return node.style[name]\r\n            } else if (name instanceof object) {\r\n                //dom.style(div, {color:'red'})\r\n                const object = name\r\n                for (let key in object) {\r\n                    node.style[key] = object[key]\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n\r\n\r\n\r\n    //dom.each(dom.children(dom.find('选择器')), fn)[0] 用于遍历所有节点\r\n    each(nodeList, fn) {\r\n        for (let i = 0; i < nodeList.length; i++) {\r\n            fn.call(null, nodeList[i])\r\n        }\r\n    }\r\n}"]}